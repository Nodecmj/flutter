import 'package:flutter/material.dart';

main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: HomePage(),
    );
  }

  Scaffold HomePage() {
    return Scaffold(
      appBar: AppBar(title: Text("状态管理")),
      body: HomeBody(),
    );
  }
}

class HomeBody extends StatefulWidget {
  HomeBody({
    Key key,
  }) : super(key: key);

  @override
  _HomeBodyState createState() => _HomeBodyState();
}

class _HomeBodyState extends State<HomeBody> {
  int _counter = 100;

  @override
  Widget build(BuildContext context) {
    return CounterWidget(
      counter: _counter,
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ShowData1(),
            ShowData2(),
            FloatingActionButton(
              onPressed: () => {
                setState(() {
                  _counter++;
                })
              },
              child: Text(
                "+",
                style: TextStyle(fontSize: 30),
              ),
            )
          ],
        ),
      ),
    );
  }
}

class ShowData2 extends StatelessWidget {
  const ShowData2({
    Key key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final counter = CounterWidget.of(context).counter;
    return Card(
      color: Colors.orange,
      child: Text("当前计数:$counter"),
    );
  }
}

class ShowData1 extends StatelessWidget {
  const ShowData1({
    Key key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final counter = CounterWidget.of(context).counter;
    return Card(
      color: Colors.deepOrange,
      child: Text("当前计数:$counter"),
    );
  }
}

class CounterWidget extends InheritedWidget {
  // 共享的数据
  final int counter;

  // 2.定义构造方法
  CounterWidget({this.counter, Widget child}) : super(child: child);

  // 3.获取组件最近的当前InheritedWidget
  static CounterWidget of(BuildContext context) {
    // Element 每个widget都会生成一个对应的Element
    // 沿着Element树，去找最近的CounterElement 从Element中取出Widget
    return context.dependOnInheritedWidgetOfExactType();
  }

  // 4.决定要不要回调state中的didChangeDependencies
  @override
  bool updateShouldNotify(covariant CounterWidget oldWidget) {
    // 如果返回ture：执行依赖当前的InheritedWidget的state中的didChangeDependencies
    return oldWidget.counter!=counter;
  }
}
